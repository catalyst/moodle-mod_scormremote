{"version":3,"file":"layer2.min.js","sources":["../src/layer2.js"],"sourcesContent":["var debug = true;\nconst output = window.console;\n\n// Define exception/error codes\nvar _NoError = { \"code\": \"0\", \"string\": \"No Error\", \"diagnostic\": \"No Error\" };\nvar _GeneralException = { \"code\": \"101\", \"string\": \"General Exception\", \"diagnostic\": \"General Exception\" };\n\nvar initialized = false;\n\n// local variable definitions\nvar apiHandle = null;\nvar embeddedWindow = null;\nvar CMI = null;\nvar ORIGIN = null;\n\nconst EMBEDDED_WINDOW_ID = 'embedded-third-layer';\nconst ALLOWED_TO_LMSGETVALUE = [\n    'cmi.core._children',\n    'cmi.core.student_id',\n    'cmi.core.student_name',\n    'cmi.core.lesson_location',\n    'cmi.core.credit',\n    'cmi.core.lesson_status',\n    'cmi.core.entry',\n    'cmi.core.score_children',\n    'cmi.core.score.raw',\n    'cmi.core.score.max',\n    'cmi.core.score.min',\n    'cmi.core.total_time',\n    'cmi.core.lesson_mode',\n    'cmi.suspend_data',\n    'cmi.launch_data',\n    'cmi.comments',\n    'cmi.comments_from_lms',\n    'cmi.objectives._children',\n    'cmi.objectives._count',\n    'cmi.objectives.*.id',\n    'cmi.objectives.*.score._children ',\n    'cmi.objectives.*.score.raw',\n    'cmi.objectives.*.score.max',\n    'cmi.objectives.*.score.min',\n    'cmi.objectives.*.status',\n    'cmi.student_data._children',\n    'cmi.student_data.mastery_score',\n    'cmi.student_data.max_time_allowed',\n    'cmi.student_data.time_limit_action',\n    'cmi.student_preference._children',\n    'cmi.student_preference.audio',\n    'cmi.student_preference.language',\n    'cmi.student_preference.speed',\n    'cmi.student_preference.text',\n    'cmi.interactions._children',\n    'cmi.interactions._count',\n    'cmi.interactions.*.objectives._count',\n    'cmi.interactions.*.time',\n    'cmi.interactions.*.correct_responses._count',\n];\n\n/**\n * Initialize communication with the LMS\n *\n * @returns {null}\n */\n// eslint-disable-next-line no-unused-vars\nfunction init() {\n    LMSGetDataModel();\n\n    const datasource = new URL(document.body.dataset.source);\n    datasource.search = document.location.search;\n    datasource.search += ( document.location.search.indexOf('?') === -1 ? '?' : '&' ); // if ?param=1 then & else ?.\n    datasource.search += 'lms_origin=' + document.location.host;\n    datasource.search += '&student_id=' + CMI.core.student_id;\n    datasource.search += '&student_name=' + CMI.core.student_name;\n    datasource.search += '&client_id=' + document.body.dataset.clientid;\n    ORIGIN = datasource.origin;\n\n    // Add event listener.\n    initMessageReciever();\n\n    // Add third layer iframe.\n    var iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"id\", EMBEDDED_WINDOW_ID);\n    iframe.setAttribute(\"src\", datasource.href);\n    iframe.setAttribute(\"frameborder\", \"0\");\n    iframe.setAttribute(\"height\", \"100%\");\n    iframe.setAttribute(\"width\", \"100%\");\n    document.body.insertBefore(iframe, document.getElementById(\"wrapper\"));\n    embeddedWindow = iframe.contentWindow;\n}\n\n/**\n * Sets the debug from layer3\n * @param {bool} debugsetting The debug setting from layer3.\n */\n// eslint-disable-next-line no-unused-vars\nfunction SetDebug(debugsetting) {\n    debug = debugsetting;\n    message(\"Debug has been set: \" + (debug ? 'true' : 'false'));\n}\n\n/**\n * Initialize communication with LMS by calling the LMSInitialize function which will be implemented by the LMS.\n *\n * @returns {string} true|false depending wheter successful.\n */\nfunction LMSInitialize() {\n    if (initialized) {\n        message(\"LMSInitialize succeeded, already initialized.\");\n        return \"true\";\n    }\n\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSInitialize was not successful.\");\n        return \"false\";\n    }\n\n    var result = api.LMSInitialize(\"\");\n    if (result.toString() != \"true\") {\n        var err = ErrorHandler();\n        message(\"LMSInitialize failed with error code: \" + err.code);\n    }\n    else {\n        initialized = true;\n        message(\"LMSInitialized succeeded.\");\n    }\n\n    return result.toString();\n}\n\n/**\n * Close communication with LMS by calling the LMSFinish function which will be implemented by the LMS.\n *\n * @returns {string} true|false depending wheter successful.\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSFinish() {\n    if (!initialized) {return \"true\";}\n\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSFinish was not successful.\");\n        return \"false\";\n    }\n    else {\n        // call the LMSFinish function that should be implemented by the API\n        var result = api.LMSFinish(\"\");\n        if (result.toString() != \"true\") {\n            var err = ErrorHandler();\n            message(\"LMSFinish failed with error code: \" + err.code);\n        }\n    }\n\n    initialized = false;\n\n    return result.toString();\n}\n\n/**\n * Wraps the call to the LMS LMSGetValue function.\n *\n * @param {string} name string representing the cmi data model defined category or element (e.g. cmi_core.student_name).\n * @returns {string}\n */\nfunction LMSGetValue(name) {\n    var api = getAPIHandle();\n    var result = \"\";\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSGetValue was not successful.\");\n    }\n    else if (!initialized && !LMSInitialize()) {\n        var err = ErrorHandler(); // get why LMSInitialize() returned false\n        message(\"LMSGetValue failed - Could not initialize communication with the LMS - error code: \" + err.code);\n    }\n    else if (LMSGetValueAllowed(name)) {\n        result = api.LMSGetValue(name);\n\n        var error = ErrorHandler();\n        if (error.code != _NoError.code) {\n            // an error was encountered so display the error description\n            message(\"LMSGetValue(\" + name + \") failed. \\n\" + error.code + \": \" + error.string);\n            result = \"\";\n        }\n    }\n\n    if (result === null) {\n        return \"\";\n    }\n    return result.toString();\n}\n\n/**\n * Wraps the call to the LMS LMSGetValue function.\n *\n * @param {string} name string representing the cmi data model defined category or element (e.g. cmi_core.student_name).\n * @param {mixed} value the value that the named element or category will be assigned.\n * @returns {string} true|false depending wheter successful.\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSSetValue(name, value) {\n    var api = getAPIHandle();\n    var result = \"false\";\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSSetValue was not successful.\");\n    }\n    else if (!initialized && !LMSInitialize()) {\n        var err = ErrorHandler(); // get why LMSInitialize() returned false\n        message(\"LMSSetValue failed - Could not initialize communication with the LMS - error code: \" + err.code);\n    }\n    else {\n        result = api.LMSSetValue(name, value);\n        if (result.toString() != \"true\") {\n            var err = ErrorHandler();\n            message(\"LMSSetValue(\" + name + \", \" + value + \") failed. \\n\" + err.code + \": \" + err.string);\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Commits the data to the LMS.\n *\n * @returns {string} true|false depending wheter successful.\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSCommit() {\n    var api = getAPIHandle();\n    var result = \"false\";\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSCommit was not successful.\");\n    }\n    else if (!initialized && !LMSInitialize()) {\n        var err = ErrorHandler(); // get why LMSInitialize() returned false\n        message(\"LMSCommit failed - Could not initialize communication with the LMS - error code: \" + err.code);\n    }\n    else {\n        result = api.LMSCommit(\"\");\n        if (result != \"true\") {\n            var err = ErrorHandler();\n            message(\"LMSCommit failed - error code: \" + err.code);\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Call the LMSGetLastError function.\n *\n * @returns {string} The error code that was set by the LMS function call.\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSGetLastError() {\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSGetLastError was not successful.\");\n        //since we can't get the error code from the LMS, return a general error\n        return _GeneralException.code; //General Exception\n    }\n\n    return api.LMSGetLastError().toString();\n}\n\n/**\n * Call the LMSGetErrorString function\n *\n * @param {number|string|null} errorCode\n * @returns {string} The textual description that corresponds to the input error code\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSGetErrorString(errorCode) {\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSGetErrorString was not successful.\");\n        return _GeneralException.string;\n    }\n\n    return api.LMSGetErrorString(errorCode).toString();\n}\n\n/**\n * Call the LMSGetDiagnostic function\n *\n * @param {number|string|null} errorCode\n * @returns {string} The vendor specific textual description that corresponds to the input error code.\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSGetDiagnostic(errorCode) {\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nLMSGetDiagnostic was not successful.\");\n        return \"Unable to locate the LMS's API Implementation. LMSGetDiagnostic was not successful.\";\n    }\n\n    return api.LMSGetDiagnostic(errorCode).toString();\n}\n\n/**\n * Determines if an error was encountered by the previous API call and if so, returns the error.\n *\n * Usage:\n * var last_error = ErrorHandler();\n * if (last_error.code != _NoError.code)\n * {\n *     message(\"Encountered an error. Code: \" + last_error.code +\n *                                          \"\\nMessage: \" + last_error.string +\n *                                          \"\\nDiagnostics: \" + last_error.diagnostic);\n * }\n *\n * @returns {object}\n */\nfunction ErrorHandler() {\n    var error = { \"code\": _NoError.code, \"string\": _NoError.string, \"diagnostic\": _NoError.diagnostic };\n    var api = getAPIHandle();\n    if (api === null || api === undefined) {\n        message(\"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\");\n        error.code = _GeneralException.code;\n        error.string = _GeneralException.string;\n        error.diagnostic = \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n        return error;\n    }\n\n    // check for errors caused by or from the LMS\n    error.code = api.LMSGetLastError().toString();\n    if (error.code != _NoError.code) {\n        // an error was encountered so display the error description\n        error.string = api.LMSGetErrorString(error.code);\n        error.diagnostic = api.LMSGetDiagnostic(\"\");\n    }\n\n    return error;\n}\n\n/**\n * Returns the handle to API object if it was previously set, otherwise it returns null\n *\n * @returns {*}\n */\nfunction getAPIHandle() {\n    if (apiHandle === null || apiHandle === undefined) {\n        apiHandle = getAPI();\n    }\n\n    return apiHandle;\n}\n\n/**\n * This function looks for an object names API in parent and opener window.\n *\n * @param {Window} win\n * @returns {*}\n */\nfunction findAPI(win) {\n    var findAPITries = 0;\n    while ((win.API === null || win.API === undefined) && (win.parent !== null && win.parent !== undefined) &&\n        (win.parent !== win)) {\n        findAPITries++;\n        // Note: 7 is an arbitrary number, but should be more than sufficient\n        if (findAPITries > 7) {\n            message(\"Error finding API -- too deeply nested.\");\n            return null;\n        }\n\n        win = win.parent;\n    }\n    return win.API;\n}\n\n/**\n * This function looks for an object named API, first in the current window's frame hierarchy and then, if necessary, in the current\n * window's opener window hierarchy (if there is an opener window).\n *\n * @returns\n */\nfunction getAPI() {\n    var theAPI = findAPI(window);\n    if ((theAPI === null || theAPI === undefined) && (window.opener !== null && window.opener !== undefined) &&\n        (typeof (window.opener) !== \"undefined\")) {\n        theAPI = findAPI(window.opener);\n    }\n    if (theAPI === null || theAPI === undefined) {\n        message(\"Unable to find an API adapter\");\n    }\n    return theAPI;\n}\n\n// TODO: Move this to UTILS.\n/**\n * This function outputs messages to a specified output. You can define your own output object. It will just need to implement a\n * log(string) function. This interface was used so that the output could be assigned the window.console object.\n *\n * Depends on:\n *  - {boolean} debug to indicate if output is wanted\n *  - {object} output to handle the messages. This object must implement a function log(string).\n *\n * @param {string} str\n * @returns {null}\n */\nfunction message(str) {\n    if (debug) {\n        output.log(\"[LAYER 2]: \" + str);\n    }\n}\n\n/**\n * This function creates the event handles for incoming postMessage. This method depends on the ORIGIN variable, if not set the\n * function will immediatly return as a security measure. The function expects that the data passed is a object which contains two\n * properties:\n *  - {string} function: The method that should be called.\n *  - {object Array} arguments: The arguments that should be passed.\n *\n * Depends on:\n *  - {string} ORIGIN to check if event origin is coming from expected path\n *\n * @returns {null}\n */\nfunction initMessageReciever() {\n    window.addEventListener('message', (e) => {\n        // Don't run anything if message is not coming from expected host.\n        if (e.origin !== ORIGIN) {\n            message('Recieved message from unknown origin \"' + e.origin + '\", (expected: \"' + ORIGIN + '\")');\n            return;\n        }\n\n        const functionName = e.data['function'];\n        const functionArgs = e.data['params'];\n\n        // Can't run unknown function.\n        if (!functionName || typeof window[functionName] !== 'function') {\n            message('Recieved message contains unexpected data for param function, recieved \"' + functionName + '\"');\n            return;\n        }\n\n        // Can't run function with no arguments passed.\n        // Even when the desired function has no argument, the passed param MUST be a empty array.\n        if (!functionArgs || typeof functionArgs !== 'object' || !Array.isArray(functionArgs)) {\n            message('Recieved message contains unexpected data for param arguments, expected array (recieved \"' +\n                Object.prototype.toString.call(functionArgs) + '\")');\n            return;\n        }\n\n        message('Message recieved. Calling function: \"' + functionName + '\"');\n        window[functionName].apply(null, functionArgs);\n    });\n}\n\n/**\n * This function looks for an iframe element by id EMBEDDED_WINDOW_ID and sets the window object to embeddedWindow. It returns the\n * value that it finds or null if it fails to find it.\n *\n * Depends on:\n *  - {string} EMBEDDED_WINDOW_ID the id to look for\n *  - {Window|null} embeddedWindow the variable to set to.\n *\n * @returns {Window|null} value contained by embeddedWindow\n */\n// eslint-disable-next-line no-unused-vars\n function getEmbeddedWindow() {\n    if (embeddedWindow === null) {\n        const element = document.findElementById(EMBEDDED_WINDOW_ID);\n\n        if (element === null) {\n            message('Could not find embedded window object, searched for element by id: \"'+ EMBEDDED_WINDOW_ID +'\"');\n            return null;\n        }\n\n        if (element.tagName !== 'IFRAME') {\n            message('Unexpected tagName for embedded window object, expected \"IFRAME\" got: \"'+ element.tagName +'\"');\n            return null;\n        }\n\n        embeddedWindow = element.contentWindow;\n    }\n\n    return embeddedWindow;\n}\n\n/**\n * This function returns the data model in object form. It will also store it to the global CMI variable.\n *\n * @returns {object}\n */\nfunction LMSGetDataModel() {\n    if (CMI === null || CMI === undefined) {\n        const result = 'core,suspend_data,launch_data,comments,comments_from_lms,objectives,student_data' +\n            ',student_preference,interactions';\n        CMI = LMSGetChildren('cmi', result.split(','));\n    }\n    return CMI;\n}\n\n/**\n * This function returns the children of a data model defined category or element inside a object.\n *\n * @param {str} parent\n * @param {str[]} children\n * @returns {object}\n */\nfunction LMSGetChildren(parent, children) {\n    let child = {};\n    const count = LMSGetNumberStored(parent);\n    if (count !== false) {\n        // Multiple childern.\n\n        for (let i = 0; i < count; i++) {\n            const key = parent + '.' + i;\n            child[i] = LMSGetChildren(key, children);\n        }\n    } else {\n        // Singular children only.\n        for (let i = 0; i < children.length; i++) {\n            const key = parent + '.' + children[i];\n            const supChildren = LMSGetSupportedChildren(key);\n\n            if (supChildren !== false) {\n                child[children[i]] = LMSGetChildren(key, supChildren);\n                continue;\n            }\n\n            child[children[i]] = LMSGetValue(key);\n        }\n    }\n\n    return child;\n}\n\n/**\n * This function returns the supported data model elements of the a given data model defined category or element. If the given name\n * does not have any supported children, then a boolean of false will be returned.\n *\n * @param {str} name data model defined category or element\n * @returns {str[]|bool}\n */\nfunction LMSGetSupportedChildren(name) {\n    const result = LMSGetValue(name + '._children');\n    if (result === \"\") {\n        return false;\n    }\n    return result.split(',');\n}\n\n/**\n * This function return the number of stored elements to this data model element or category. If the element does not support\n * multiple stored elements then it will return false.\n *\n * @param {str} name data model defined category or element\n * @returns {number|bool}\n */\nfunction LMSGetNumberStored(name) {\n    const result = LMSGetValue(name + \"._count\");\n    if (result === \"\") {\n        return false;\n    }\n    return parseInt(result);\n}\n\n/**\n * This function send the CMI aka DataModel to the third layer.\n *\n * @returns {null}\n */\n// eslint-disable-next-line no-unused-vars\nfunction postLMSDataModel() {\n    const datamodel = LMSGetDataModel();\n    embeddedWindow.postMessage(\n        { function: 'LMSSetDataModel', arguments: [datamodel] },\n        ORIGIN\n    );\n}\n\n/**\n * Method returns a boolean value if getting varaible through LMSGetValue is allowed.\n *\n * @param {str} name data model defined category or element.\n * @return {bool}\n */\nfunction LMSGetValueAllowed(name) {\n    // The name might contain a number, which is used as a index.\n    // We'll a group of numbers with a *.\n    return ALLOWED_TO_LMSGETVALUE.includes(name.replace('/\\d+/g', '*'));\n}\n"],"names":["window","console"],"mappings":"AACeA,OAAOC"}
{"version":3,"file":"layer3.min.js","sources":["../src/layer3.js"],"sourcesContent":["const LOGLEVEL_TOKEN = 1;\nvar settings = {\n    // Determines whether the API schedules an autocommit to the LMS after setting a value. |\n    autocommit:            true,\n    // Number of seconds to wait before autocommiting. Timer is restarted if another value is set. |\n    autocommitSeconds:     5,\n    logLevel: LOGLEVEL_TOKEN, // 0 => DEBUG,\n                              // 1 => INFO,\n                              // 2 => WARN,\n                              // 3 => ERROR, // Default.\n                              // 4 => NONE\n    // Function to transform the commit object before sending it to lmsCommitUrl.\n    //requestHandler:        () => {},\n    // Function to be called whenever a message is logged.\n    //onLogMessage:          () => {},\n};\n\nvar initialized = false;\nvar debug = settings.logLevel <= 1;\nconst output = window.console;\n\n// TODO: Move constants to their own file.\nconst EMBEDDED_WINDOW_ID = 'embedded-fourth-layer';\nconst ORIGIN = \"*\"; //TODO: issue 27\n\n\n/**\n * Initialize communication with the LMS\n *\n * @returns {null}\n */\n// eslint-disable-next-line no-unused-vars\nfunction init() {\n    // Create event listener.\n    initMessageReciever();\n\n    // Update debug setting.\n    debug = settings.logLevel <= 1;\n    postMessageToParent('SetDebug', [debug]);\n\n    // Setup the API.\n    // TODO: issue 23.\n    // eslint-disable-next-line no-undef\n    window.API = new Scorm12API(settings);\n    window.API.on(\"LMSCommit\", () => {\n        if (!initialized) {\n            return;\n        }\n        postMessageToParent('LMSCommit');\n    });\n    window.API.on(\"LMSFinish\", () => {\n        if (!initialized) {\n            return;\n        }\n        postMessageToParent('LMSFinish');\n    });\n    window.API.on(\"LMSSetValue\", (CMIElement, value) => {\n        if (!initialized) {\n            return;\n        }\n        onLMSSetValue(CMIElement, value);\n    });\n\n    // Ask for the data model to be sent.\n    postMessageToParent('postLMSDataModel', []);\n\n    // TODO: Set took to long to connect timeout.\n}\n\n/**\n * This function creates the event handler for incoming postMessage. We expect the parent window (which is on a different domain) to\n * send a single message. This message contains the data model object. We keep listening for errors.\n * properties:\n *  - {string} function: The method that should be called [ErrorHandler, LMSSetDataModel].\n *  - {object Array} arguments: The arguments that should be passed.\n *\n * Depends on:\n *  - {string} ORIGIN to check if event origin is coming from expected path\n *\n * @returns {null}\n */\n function initMessageReciever() {\n    window.addEventListener('message', (e) => {\n        const ALLOWED_METHODS = ['ErrorHandler', 'LMSSetDataModel', 'message'];\n\n        const functionName = e.data['function'];\n        const functionArgs = e.data['arguments'];\n\n        // Can't run unknown function.\n        if (\n            !functionName ||\n            !ALLOWED_METHODS.includes(functionName) ||\n            typeof window[functionName] !== 'function'\n        ) {\n            message('Recieved message contains unexpected data for param function, recieved \"' + functionName + '\"');\n            return;\n        }\n\n        // Can't run function with no arguments passed.\n        // Even when the desired function has no argument, the passed param MUST be a empty array.\n        if (!functionArgs || typeof functionArgs !== 'object' || !Array.isArray(functionArgs)) {\n            message('Recieved message contains unexpected data for param arguments, expected array (recieved \"' +\n                Object.prototype.toString.call(functionArgs) + '\")');\n            return;\n        }\n\n        message('Message recieved. Calling function: \"' + functionName + '\"');\n        window[functionName].apply(null, functionArgs);\n    });\n}\n\n/**\n * This function outputs messages to a specified output. You can define your own output object. It will just need to implement a\n * log(string) function. This interface was used so that the output could be assigned the window.console object.\n *\n * Depends on:\n *  - {boolean} debug to indicate if output is wanted\n *  - {object} output to handle the messages. This object must implement a function log(string).\n *\n * @param {string} str\n * @returns {null}\n */\n function message(str) {\n    if (debug) {\n        output.log(\"[LAYER 3]: \" + str);\n    }\n}\n\n/**\n * This function allows for the data model to be set prior to LMSInitialize. After setting the data model we call loadContent().\n * This must be run before SCO content in loaded.\n *\n * @param {object} cmi\n */\n// eslint-disable-next-line no-unused-vars\nfunction LMSSetDataModel(cmi) {\n    window.API.loadFromJSON(cmi);\n    initialized = true;\n    loadContent();\n}\n\n/**\n * Load the requested SCO content.\n *\n * @returns {null}\n */\n function loadContent() {\n    const parameters = document.location.search;\n    const datasource  =  new URL(document.body.dataset.source + parameters);\n\n    var iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"id\", EMBEDDED_WINDOW_ID);\n    iframe.setAttribute(\"src\", datasource);\n    iframe.setAttribute(\"frameborder\", \"0\");\n    iframe.setAttribute(\"height\", \"100%\");\n    iframe.setAttribute(\"width\", \"100%\");\n    document.body.insertBefore(iframe, document.getElementById(\"wrapper\"));\n}\n\n/**\n * Handle LMSSetValue call.\n *\n * @param {string} name\n * @param {string} value\n */\nfunction onLMSSetValue(name, value) {\n    message('Setting \"' + name + '\" to value: \"' + value + '\"');\n    postMessageToParent('LMSSetValue', [name, value]);\n\n    // On submit of lesson status we log completion.\n    if (\n        window.API.cmi.core.lesson_mode !== 'review'\n        && name === 'cmi.core.lesson_status'\n        && ['completed', 'failed', 'passed'].includes(value)\n    ) {\n        postCompletion();\n    }\n}\n\n/**\n * Post to host that activity has been completed.\n *\n * @returns {null}\n */\nfunction postCompletion() {\n    // Fetch the src of the iframe. This already contains the needed search parameters.\n    const submitsource  =  new URL(document.getElementById(EMBEDDED_WINDOW_ID).src);\n\n    // We need to append the search params with the context id.\n    const contextid = getContextIDFromPathname(submitsource.pathname);\n    submitsource.search += '&contextid=' + contextid;\n\n    // Replace old pathname with submit complete.\n    submitsource.pathname = '/mod/scormremote/submit_completion.php';\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", submitsource.href, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send();\n}\n\n/**\n * Get context id from pathname.\n *\n * Example pathname /pluginfile.php/123/content/0/index.html then the functions returns 123.\n *\n * @param {string} pathname\n * @returns {number}\n */\nfunction getContextIDFromPathname(pathname) {\n    const items = pathname.split('/');\n\n    // Return the first element which is a number in items.\n    for (let index = 0; index < items.length; index++) {\n        if (items[index] !== '' && !isNaN(items[index])) {\n            return parseInt(items[index]);\n        }\n    }\n\n    return 0;\n}\n\n/**\n * Send postMessage to parent window in correct format.\n *\n * @param {string} functionName\n * @param {*} params\n * @returns {null}\n */\nfunction postMessageToParent(functionName, params = []) {\n    message('send a message to parent calling function \"' + functionName + '\"');\n    window.parent.postMessage(\n        {function: functionName, params},\n        ORIGIN\n    );\n}"],"names":["window","console"],"mappings":"AAmBeA,OAAOC"}